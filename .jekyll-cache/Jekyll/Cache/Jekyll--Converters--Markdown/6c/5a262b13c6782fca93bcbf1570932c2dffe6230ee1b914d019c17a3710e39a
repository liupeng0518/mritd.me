I"+<blockquote>
  <p>不知道 Consul 用的人多还是少，最近有人问怎么搭建 Consul 集群，这里顺手记录一下吧</p>
</blockquote>

<h3 id="一简介">一、简介</h3>

<p>Consul 与 Etcd 一样，都属于分布式一致性数据库，其主要特性就是在分布式系统中出现意外情况如节点宕机的情况下保证数据的一致性；相对于 Etcd 来说，Consul 提供了更加实用的其他功能特性，如 DNS、健康检查、服务发现、多数据中心等，同时还有 web ui 界面，体验相对于更加友好</p>

<h3 id="二环境准备">二、环境准备</h3>

<p>同 Etcd 一样，Consul 最少也需要 3 台机器，这里测试实用 5 台机器进行部署集群，具体环境如下</p>

<table>
  <thead>
    <tr>
      <th>节点</th>
      <th>IP</th>
      <th>Version</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>server</td>
      <td>192.168.1.11</td>
      <td>v0.9.3</td>
    </tr>
    <tr>
      <td>server</td>
      <td>192.168.1.12</td>
      <td>v0.9.3</td>
    </tr>
    <tr>
      <td>server</td>
      <td>192.168.1.13</td>
      <td>v0.9.3</td>
    </tr>
    <tr>
      <td>client</td>
      <td>192.168.1.14</td>
      <td>v0.9.3</td>
    </tr>
    <tr>
      <td>client</td>
      <td>192.168.1.15</td>
      <td>v0.9.3</td>
    </tr>
  </tbody>
</table>

<p>其中 consul 采用 rpm 包的形式进行安装，这里并没有使用 docker 方式启动是因为个人习惯重要的数据存储服务交给 systemd管理；因为 docker 存在 docker daemon 的原因，如果用 docker 启动这种存储核心数据的组件，一但 daemon 出现问题那么所有容器都将出现问题；所以个人还是比较习惯将 etcd 和 consul 以二进制装在宿主机，由 systemd 直接管理。</p>

<h3 id="三部署集群">三、部署集群</h3>

<h4 id="31consul-集群模式">3.1、Consul 集群模式</h4>

<p>Consul 集群与 Etcd 略有区别，<strong>Consul 在启动后分为两种模式:</strong></p>

<ul>
  <li>Server 模式: 一个 Server 是一个有一组扩展功能的代理，这些功能包括参与 Raft 选举，维护集群状态，响应 RPC 查询，与其他数据中心交互 WAN gossip 和转发查询给 leader 或者远程数据中心。</li>
  <li>Client 模式: 一个 Client 是一个转发所有 RPC 到 Server 的代理。这个 Client 是相对无状态的；Client 唯一执行的后台活动是加入 LAN gossip 池，这有一个最低的资源开销并且仅消耗少量的网络带宽。</li>
</ul>

<p><strong>其集群后如下所示:</strong></p>

<p><img src="https://cdn.oss.link/markdown/n4mdw.jpg" alt="Consul Cluster" /></p>

<h4 id="32集群搭建">3.2、集群搭建</h4>

<p>Consul 集群搭建时一般提供两种模式:</p>

<ul>
  <li><strong>手动模式: 启动第一个节点后，此时此节点处于 bootstrap 模式，其节点手动执行加入</strong></li>
  <li><strong>自动模式: 启动第一个节点后，在其他节点配置好尝试加入的目标节点，然后等待其自动加入(不需要人为命令加入)</strong></li>
</ul>

<p>这里采用自动加入模式，搭建过程如下:</p>

<p><strong>首先获取 Consul 的 rpm 包，鉴于官方并未提供 rpm 安装包，所以我自己造了一个轮子，打包脚本见 <a href="https://github.com/mritd/consul-rpm">Github</a>，以下直接从我的 yum 源中安装</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 安装 yum 源</span>
<span class="nb">tee</span> /etc/yum.repos.d/mritd.repo <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
[mritdrepo]
name=Mritd Repository
baseurl=https://yumrepo.b0.upaiyun.com/centos/7/x86_64
enabled=1
gpgcheck=1
gpgkey=https://cdn.oss.link/keys/rpm.public.key
</span><span class="no">EOF

</span><span class="c"># 安装 Consul，请不要在大规模部署时使用此 yum 源，CDN 流量不多请手下留情，</span>
<span class="c"># 如需大规模部署 请使用 yumdonwloader 工具下载 rpm 后手动分发安装</span>
yum <span class="nb">install</span> <span class="nt">-y</span> consul
</code></pre></div></div>

<p><strong>5 台机器安装好后修改其中三台为 Server 模式并启动</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/consul/consul.json

<span class="c"># 配置如下</span>

<span class="o">{</span>
    <span class="s2">"datacenter"</span>: <span class="s2">"dc1"</span>,                // 数据中心名称
    <span class="s2">"data_dir"</span>: <span class="s2">"/var/lib/consul"</span>,      // Server 节点数据目录
    <span class="s2">"log_level"</span>: <span class="s2">"INFO"</span>,                // 日志级别
    <span class="s2">"node_name"</span>: <span class="s2">"docker1.node"</span>,        // 当前节点名称
    <span class="s2">"server"</span>: <span class="nb">true</span>,                     // 是否为 Server 模式，false 为 Client 模式
    <span class="s2">"ui"</span>: <span class="nb">true</span>,                         // 是否开启 UI 访问
    <span class="s2">"bootstrap_expect"</span>: 1,              // 启动时期望的就绪节点，1 代表启动为 bootstrap 模式，等待其他节点加入
    <span class="s2">"bind_addr"</span>: <span class="s2">"192.168.1.11"</span>,        // 绑定的 IP
    <span class="s2">"client_addr"</span>: <span class="s2">"192.168.1.11"</span>,      // 同时作为 Client 接受请求的绑定 IP
    <span class="s2">"retry_join"</span>: <span class="o">[</span><span class="s2">"192.168.1.12"</span>,<span class="s2">"192.168.1.13"</span><span class="o">]</span>,  // 尝试加入的其他节点
    <span class="s2">"retry_interval"</span>: <span class="s2">"3s"</span>,             // 每次尝试间隔
    <span class="s2">"raft_protocol"</span>: 3,                 // Raft 协议版本
    <span class="s2">"enable_debug"</span>: <span class="nb">false</span>,              // 是否开启 Debug 模式
    <span class="s2">"rejoin_after_leave"</span>: <span class="nb">true</span>,         // 允许重新加入集群
    <span class="s2">"enable_syslog"</span>: <span class="nb">false</span>              // 是否开启 syslog
<span class="o">}</span>
</code></pre></div></div>

<p><strong>另外两个节点与以上配置大致相同，差别在于其他两个 Server 节点 <code class="highlighter-rouge">bootstrap_expect</code> 值为 2，即期望启动时已经有两个节点就绪；然后依次启动三个 Server 节点即可</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl start consul
systemctl <span class="nb">enable </span>consul
systemctl status consul
</code></pre></div></div>

<p><strong>此时可访问任意一台 Server 节点的 UI 界面，地址为 <code class="highlighter-rouge">http://serverIP:8500</code>，截图如下</strong></p>

<p><img src="https://cdn.oss.link/markdown/t9cxf.jpg" alt="Server Success" /></p>

<p>接下来修改其他两个节点配置，使其作为 Client 加入到集群即可，<strong>注意的是当处于 Client 模式时，<code class="highlighter-rouge">bootstrap_expect</code> 必须为 0，即关闭状态；具体配置如下</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"datacenter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"dc1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"data_dir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/var/lib/consul"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"log_level"</span><span class="p">:</span><span class="w"> </span><span class="s2">"INFO"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"node_name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"docker4.node"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"server"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ui"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"bootstrap_expect"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
    </span><span class="nl">"bind_addr"</span><span class="p">:</span><span class="w"> </span><span class="s2">"192.168.1.14"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"client_addr"</span><span class="p">:</span><span class="w"> </span><span class="s2">"192.168.1.14"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"retry_join"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"192.168.1.11"</span><span class="p">,</span><span class="s2">"192.168.1.12"</span><span class="p">,</span><span class="s2">"192.168.1.13"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"retry_interval"</span><span class="p">:</span><span class="w"> </span><span class="s2">"3s"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"raft_protocol"</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w">
    </span><span class="nl">"enable_debug"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"rejoin_after_leave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"enable_syslog"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>另外一个 Client 配置与以上相同，最终集群成功后如下所示</p>

<p><img src="https://cdn.oss.link/markdown/j1zrc.jpg" alt="Cluster ok" /></p>

<p><img src="https://cdn.oss.link/markdown/kq4cz.jpg" alt="Command Line" /></p>

<h3 id="四其他说明">四、其他说明</h3>

<p>关于 Consul 的其他各种参数说明，中文版可参考 <a href="http://www.10tiao.com/html/357/201705/2247485185/1.html">Consul集群部署</a>；这个文章对大体上讲的基本很全了，但是随着版本变化，有些参数还是需要参考一下 <a href="https://www.consul.io/docs/agent/options.html">官方配置文档</a></p>

<p>转载请注明出处，本文采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/">CC4.0</a> 协议授权</p>
:ET