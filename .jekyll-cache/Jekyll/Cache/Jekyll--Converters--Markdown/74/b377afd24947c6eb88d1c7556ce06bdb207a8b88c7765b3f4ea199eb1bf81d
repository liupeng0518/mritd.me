I"i6<blockquote>
  <p>WWDC16 苹果正式发出公告，2017年1月1号后所有 IOS 应用需要使用 HTTPS 配置，并且 HTTPS 还得符合 ATS 要求，以下记录一下 CentoS 7 下配置 nginx HTTPS 并满足 ATS 过程</p>
</blockquote>

<h3 id="一nginx-https-最佳实践">一、Nginx HTTPS 最佳实践</h3>

<p>随着 HTTPS 呼声越来越高，web 站点 HTTPS 化必不可免；而使用 Nginx 作为前端反向代理服务器配置 HTTPS 时有很多复杂参数，这里采取偷懒办法，直接采用 mozilla 给出的最佳实践参数(如果自己玩的非常溜可以自己自定义)；mozilla 给出了一个生成 HTTPS 配置的 web 页面，基本上给出的 HTTPS 配置已经是很好的最佳实践了，地址 –&gt; <a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/">Generate Mozilla Security Recommended Web Server Configuration Files</a></p>

<p>服务器选择 Nginx，输入对应 Nginx 版本号和 OpenSSL 版本号；<strong>注意：为了支持 HTTP2，OpenSSL版本必须大于等于 1.0.2</strong>，截图如下</p>

<p><img src="https://cdn.oss.link/markdown/z5umu.jpg" alt="config" /></p>

<h3 id="二升级-openssl">二、升级 OpenSSL</h3>

<h4 id="21基础准备">2.1、基础准备</h4>

<p>准备好配置参数以后，需要升级 CentOS 7 默认的 openssl(默认最新版本 1.0.1e)，升级时最好打上 cloudflare 提供的用于支持对移动端比较友好的 chacha20 加密算法补丁，具体过程如下</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 安装编译依赖</span>
yum <span class="nb">install </span>gcc glibc glibc-devel make pcre <span class="se">\</span>
        pcre-devel zlib zlib-devel kernel-devel <span class="se">\</span>
        curl gnupg libxslt libxslt-devel gd-devel <span class="se">\</span>
        geoip-devel perl-devel perl-ExtUtils-Embed <span class="se">\</span>
        lua lua-devel patch <span class="nt">-y</span>
        
<span class="c"># 下载 openssl 源码</span>
wget https://www.openssl.org/source/openssl-1.0.2j.tar.gz

<span class="c"># 下载 chacha20 补丁</span>
wget https://raw.githubusercontent.com/cloudflare/sslconfig/master/patches/openssl__chacha20_poly1305_draft_and_rfc_ossl102j.patch

<span class="c"># 解压源码</span>
<span class="nb">tar</span> <span class="nt">-zxvf</span> openssl-1.0.2j.tar.gz

<span class="c"># 打补丁</span>
<span class="nb">mv </span>openssl__chacha20_poly1305_draft_and_rfc_ossl102j.patch openssl-1.0.2j
<span class="nb">cd </span>openssl-1.0.2j <span class="o">&amp;&amp;</span> patch <span class="nt">-p1</span> &lt; openssl__chacha20_poly1305_draft_and_rfc_ossl102j.patch
</code></pre></div></div>

<h4 id="22编译安装">2.2、编译安装</h4>

<p>打过补丁以后就可以安装并进行替换了</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 编译并安装</span>
./config shared zlib-dynamic
make <span class="o">&amp;&amp;</span> make <span class="nb">install</span>

<span class="c"># 备份原来的 openssl 以防不测</span>
<span class="nb">mv</span> /usr/bin/openssl  /usr/bin/openssl.old
<span class="nb">mv</span> /usr/include/openssl  /usr/include/openssl.old

<span class="c"># 使用软连接方式替换</span>
<span class="nb">ln</span> <span class="nt">-s</span> /usr/local/ssl/bin/openssl  /usr/bin/openssl
<span class="nb">ln</span> <span class="nt">-s</span> /usr/local/ssl/include/openssl  /usr/include/openssl

<span class="c"># libssl.so 不同操作系统位置不同，建议先 find 一下，然后挨个替换</span>
<span class="nb">ln</span> <span class="nt">-s</span> /usr/local/ssl/lib/libssl.so /usr/lib/libssl.so
<span class="nb">ln</span> <span class="nt">-s</span> /usr/local/ssl/lib/libssl.so /usr/local/lib64/libssl.so

<span class="c"># 刷新 共享库缓存</span>
<span class="nb">echo</span> <span class="s2">"/usr/local/ssl/lib"</span> <span class="o">&gt;&gt;</span> /etc/ld.so.conf
ldconfig <span class="nt">-v</span>

<span class="c"># 最后验证一下 如果都显示为 1.0.2j 表明成功</span>
openssl version
strings /usr/local/lib64/libssl.so |grep OpenSSL
</code></pre></div></div>

<h3 id="三编译安装-nginx">三、编译安装 Nginx</h3>

<p>编译 Nginx 参数有很多，具体的可以自行更改，以下参考官方参数并且安装了 <a href="https://github.com/openresty/lua-nginx-module">lua-nginx</a>、<a href="https://github.com/openresty/headers-more">headers-more</a>、<a href="https://github.com/yaoweibin/nginx_upstream_check_module">upstream_check</a>、<a href="https://github.com/simpl/ngx_devel_kit">ngx_devel_kit</a></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 定义版本</span>
<span class="nb">export </span><span class="nv">NGINX_VERSION</span><span class="o">=</span><span class="s2">"1.11.6"</span>
<span class="nb">export </span><span class="nv">NGINX_LUA_MODULE_VERSION</span><span class="o">=</span><span class="s2">"0.10.7"</span>
<span class="nb">export </span><span class="nv">OPENSSL_VERSION</span><span class="o">=</span><span class="s2">"1.0.1t"</span>
<span class="nb">export </span><span class="nv">HEADERS_MORE_VERSION</span><span class="o">=</span><span class="s2">"0.32"</span>
<span class="nb">export </span><span class="nv">UPSTREAM_CHECK_VERSION</span><span class="o">=</span><span class="s2">"0.3.0"</span>
<span class="nb">export </span><span class="nv">DEVEL_KIT_VERSION</span><span class="o">=</span><span class="s2">"0.3.0"</span>
<span class="nb">export </span><span class="nv">LUAJIT_VERSION</span><span class="o">=</span><span class="s2">"2.0.4"</span>
<span class="nb">export </span><span class="nv">LUAJIT_MAIN_VERSION</span><span class="o">=</span><span class="s2">"2.0"</span>
<span class="nb">export </span><span class="nv">LUAJIT_LIB</span><span class="o">=</span><span class="s2">"/usr/local/lib"</span>
<span class="nb">export </span><span class="nv">LUAJIT_INC</span><span class="o">=</span><span class="s2">"/usr/local/include/luajit-</span><span class="nv">$LUAJIT_MAIN_VERSION</span><span class="s2">"</span>

<span class="c"># 下载相关源码</span>
wget http://nginx.org/download/nginx-<span class="k">${</span><span class="nv">NGINX_VERSION</span><span class="k">}</span>.tar.gz
wget https://github.com/openresty/lua-nginx-module/archive/v<span class="k">${</span><span class="nv">NGINX_LUA_MODULE_VERSION</span><span class="k">}</span>.tar.gz <span class="nt">-O</span> lua-nginx-module-v<span class="k">${</span><span class="nv">NGINX_LUA_MODULE_VERSION</span><span class="k">}</span>.tar.gz
wget https://github.com/openresty/headers-more-nginx-module/archive/v<span class="k">${</span><span class="nv">HEADERS_MORE_VERSION</span><span class="k">}</span>.tar.gz
wget https://github.com/yaoweibin/nginx_upstream_check_module/archive/v<span class="k">${</span><span class="nv">UPSTREAM_CHECK_VERSION</span><span class="k">}</span>.tar.gz
wget https://github.com/simpl/ngx_devel_kit/archive/v<span class="k">${</span><span class="nv">DEVEL_KIT_VERSION</span><span class="k">}</span>.tar.gz <span class="nt">-O</span> ngx_devel_kit-v<span class="k">${</span><span class="nv">DEVEL_KIT_VERSION</span><span class="k">}</span>.tar.gz
wget http://luajit.org/download/LuaJIT-<span class="nv">$LUAJIT_VERSION</span>.tar.gz

<span class="c"># 解压</span>
<span class="k">for </span>tgzName <span class="k">in</span> <span class="sb">`</span><span class="nb">ls</span> <span class="k">*</span>.tar.gz<span class="sb">`</span><span class="p">;</span><span class="k">do
    </span><span class="nb">tar</span> <span class="nt">-zxvf</span> <span class="nv">$tgzName</span>
<span class="k">done</span>

<span class="c"># 编译并安装(上面下载是在 /usr/src 下进行的)</span>
<span class="nv">CONFIG_ARGS</span><span class="o">=</span><span class="s2">"</span><span class="se">\</span><span class="s2">
    --prefix=</span><span class="k">${</span><span class="nv">PREFIX</span><span class="k">:-</span><span class="p">/usr/local/nginx</span><span class="k">}</span><span class="s2"> </span><span class="se">\</span><span class="s2">
    --pid-path=/var/run/nginx.pid </span><span class="se">\</span><span class="s2">
    --lock-path=/var/run/nginx.lock </span><span class="se">\</span><span class="s2">
    --with-http_ssl_module </span><span class="se">\</span><span class="s2">
    --with-http_realip_module </span><span class="se">\</span><span class="s2">
    --with-http_addition_module </span><span class="se">\</span><span class="s2">
    --with-http_sub_module </span><span class="se">\</span><span class="s2">
    --with-http_dav_module </span><span class="se">\</span><span class="s2">
    --with-http_flv_module </span><span class="se">\</span><span class="s2">
    --with-http_mp4_module </span><span class="se">\</span><span class="s2">
    --with-http_gunzip_module </span><span class="se">\</span><span class="s2">
    --with-http_gzip_static_module </span><span class="se">\</span><span class="s2">
    --with-http_random_index_module </span><span class="se">\</span><span class="s2">
    --with-http_secure_link_module </span><span class="se">\</span><span class="s2">
    --with-http_stub_status_module </span><span class="se">\</span><span class="s2">
    --with-http_auth_request_module </span><span class="se">\</span><span class="s2">
    --with-http_xslt_module=dynamic </span><span class="se">\</span><span class="s2">
    --with-http_image_filter_module=dynamic </span><span class="se">\</span><span class="s2">
    --with-http_geoip_module=dynamic </span><span class="se">\</span><span class="s2">
    --with-http_perl_module=dynamic </span><span class="se">\</span><span class="s2">
    --with-threads </span><span class="se">\</span><span class="s2">
    --with-stream </span><span class="se">\</span><span class="s2">
    --with-stream_ssl_module </span><span class="se">\</span><span class="s2">
    --with-stream_ssl_preread_module </span><span class="se">\</span><span class="s2">
    --with-stream_realip_module </span><span class="se">\</span><span class="s2">
    --with-stream_geoip_module=dynamic </span><span class="se">\</span><span class="s2">
    --with-http_slice_module </span><span class="se">\</span><span class="s2">
    --with-mail </span><span class="se">\</span><span class="s2">
    --with-mail_ssl_module </span><span class="se">\</span><span class="s2">
    --with-file-aio </span><span class="se">\</span><span class="s2">
    --with-http_v2_module </span><span class="se">\</span><span class="s2">
    --with-openssl=/usr/src/openssl-</span><span class="k">${</span><span class="nv">OPENSSL_VERSION</span><span class="k">}</span><span class="s2"> </span><span class="se">\</span><span class="s2">
    --add-module=/usr/src/headers-more-nginx-module-</span><span class="k">${</span><span class="nv">HEADERS_MORE_VERSION</span><span class="k">}</span><span class="s2"> </span><span class="se">\</span><span class="s2">
    --add-module=/usr/src/nginx_upstream_check_module-</span><span class="k">${</span><span class="nv">UPSTREAM_CHECK_VERSION</span><span class="k">}</span><span class="s2"> </span><span class="se">\</span><span class="s2">
    --add-module=/usr/src/ngx_devel_kit-</span><span class="k">${</span><span class="nv">DEVEL_KIT_VERSION</span><span class="k">}</span><span class="s2"> </span><span class="se">\</span><span class="s2">
    --add-module=/usr/src/lua-nginx-module-</span><span class="k">${</span><span class="nv">NGINX_LUA_MODULE_VERSION</span><span class="k">}</span><span class="s2"> </span><span class="se">\</span><span class="s2">
    --http-client-body-temp-path=/tmp/client_body_temp </span><span class="se">\</span><span class="s2">
    --http-proxy-temp-path=/tmp/proxy_temp </span><span class="se">\</span><span class="s2">
    --http-fastcgi-temp-path=/tmp/fastcgi_temp </span><span class="se">\</span><span class="s2">
    --http-uwsgi-temp-path=/tmp/uwsgi_temp </span><span class="se">\</span><span class="s2">
    --http-scgi-temp-path=/tmp/scgi_temp </span><span class="se">\</span><span class="s2">
    "</span>

<span class="c"># 先安装 lua</span>
<span class="nb">cd</span> /usr/src/LuaJIT-<span class="nv">$LUAJIT_VERSION</span>
make <span class="nt">-j</span><span class="si">$(</span>getconf _NPROCESSORS_ONLN<span class="si">)</span>
make <span class="nb">install</span>

<span class="c"># 安装 nginx</span>
<span class="nb">cd</span> /usr/src/nginx-<span class="nv">$NGINX_VERSION</span>
./configure <span class="nv">$CONFIG_ARGS</span> <span class="nt">--with-debug</span>
make <span class="nt">-j</span><span class="si">$(</span>getconf _NPROCESSORS_ONLN<span class="si">)</span>
make <span class="nb">install</span>
</code></pre></div></div>

<h3 id="四配置-https">四、配置 HTTPS</h3>

<p>主配置参考步骤一的 HTTPS 最佳实践，以下只做简要说明</p>

<p>前向保密 <code class="highlighter-rouge">dhparam.pem</code> 文件通过 <code class="highlighter-rouge">openssl dhparam 4096 &gt; dhparam.pem</code> 生成</p>

<p><code class="highlighter-rouge">ssl_trusted_certificate</code> 需要 CA 根证书，请根据具体证书 CA 自行下载</p>

<h3 id="五验证-ats">五、验证 ATS</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 验证命令 如果 grep 到 FAIL 则说明配置不通过，</span>
<span class="c"># 需重新检查配置，否则则证明 ATS 通过</span>
nscurl <span class="nt">--ats-diagnostics</span> <span class="nt">--verbose</span> https://mritd.me | <span class="nb">grep </span>FAIL
</code></pre></div></div>

<p>转载请注明出处，本文采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/">CC4.0</a> 协议授权</p>
:ET