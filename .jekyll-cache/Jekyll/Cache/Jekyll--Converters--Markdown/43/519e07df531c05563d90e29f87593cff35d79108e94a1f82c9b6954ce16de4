I"6<blockquote>
  <p>对于 kubernetes 用户来说很头疼的问题就是 1.4 以后组件容器化，而相关镜像在 Google gcr.io 仓库；对于国内的网络环境(傻逼 GFW、一群脑残、闭关锁国、妈了个蛋的…好了下面继续)来说，这些镜像下载极其困难；当然国内 IT 巨头一般都提供了所谓的 “Docker 加速器”，但是由于使用众多，速度也不尽人意；这里开放一个个人维护的反代仓库</p>
</blockquote>

<h3 id="一仓库使用">一、仓库使用</h3>

<p><strong>注意：本仓库需要 docker 1.12 版本使用，最新的 1.13 无法使用，不推荐 1.13 和最新的 k8s 组合</strong></p>

<h4 id="11启动代理仓库">1.1、启动代理仓库</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-dt</span> <span class="nt">--privileged</span> <span class="nt">--name</span> gcr-registry <span class="nt">-p</span> 5000:5000 <span class="nt">--restart</span> always mritd/gcr-registry:1.0.0
</code></pre></div></div>

<h4 id="12配置-docker-非安全-registry">1.2、配置 docker 非安全 registry</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># centos</span>
vim /usr/lib/systemd/system/docker.service
<span class="c"># ubuntu(好像是这个位置)</span>
vim /lib/systemd//system/docker.service

<span class="c"># 在 ExecStart 后增加 --insecure-registry registry_address，如下所示</span>
<span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/dockerd <span class="nt">--insecure-registry</span> 192.168.1.120:5000
</code></pre></div></div>

<p>然后重载配置</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
systemctl restart docker
</code></pre></div></div>

<h4 id="13拉取镜像">1.3、拉取镜像</h4>

<p>此时直接对私服拉取镜像即可，<strong>注意要加 <code class="highlighter-rouge">google_containers</code> 前缀</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull 192.168.1.120:5000/google_containers/etcd-amd64:3.0.14-kubeadm
</code></pre></div></div>

<p><strong>如果有兴趣自己搭建请看第二部分，共享的仓库相关设置已经做了加密；为了防止滥用已经以黑箱形式 push 到 Docker Hub，每个月大约有 500G 流量可供使用，请大家节约；使用时最好 pull 到本地，然后 save 出来以作备用和集群分发；请不要集群部署时全部采用此仓库进行 pull；目前处于试运行，随时可能跑路(建立在有人恶意使用的情况下)；如果你感觉这个仓库对你有帮助，欢迎请我喝杯咖啡:</strong></p>

<p><img src="https://cdn.oss.link/markdown/zhifubao.png" alt="alipay" /></p>

<h3 id="二仓库基本原理">二、仓库基本原理</h3>

<p>大致上想在墙内获取 gcr.io 镜像一般有两种方式:</p>

<ul>
  <li>在本地开梯子，docker 设置全局代理，然后 pull 镜像</li>
  <li>架设反代私服，在国外服务器架设私服，或者给国内架设私服并给私服套个梯子</li>
</ul>

<p>关于如何给 docker 设置代理请参考 <a href="https://github.com/mritd/shell_scripts/blob/master/docker_proxy.sh">这个脚本</a>，如果本地是 http/https 代理只需要更改脚本的协议头即可；以下介绍私服反代 gcr.io</p>

<h4 id="21国外服务器反代">2.1、国外服务器反代</h4>

<p>这种情况相对简单，只需要在国外服务器中启动一个 docker 官方仓库，同时修改一下 docker registry 配置文件，添加代理仓库地址即可；官方配置文件 <a href="https://github.com/docker/distribution-library-image/blob/4339e1083299550aeb5915e0d5a5238d159872da/registry/config-example.yml">在这里</a>，修改如下</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>version: 0.1
log:
  fields:
    service: registry
storage:
  cache:
    blobdescriptor: inmemory
  filesystem:
    rootdirectory: /var/lib/registry
http:
  addr: :5000
  headers:
    X-Content-Type-Options: <span class="o">[</span>nosniff]
health:
  storagedriver:
    enabled: <span class="nb">true
    </span>interval: 10s
    threshold: 3
<span class="c"># 指定反代仓库</span>
proxy:
  remoteurl: https://gcr.io
</code></pre></div></div>

<p>由于 registry 位于国外服务器，所以不受 GFW 影响，此时本地 docker 直接向国外服务器 pull 即可，<strong>注意 pull 时 镜像增加 <code class="highlighter-rouge">google_containers</code> 前缀</strong></p>

<h4 id="22国内服务器反代">2.2、国内服务器反代</h4>

<p>国内服务器想反代的话由于在国内，所以办法只有一个，给 registry 套上一个代理，使 registry 可以通过代理连接到 gcr.io，<strong>经过测试，官方 registry 只接受 http/https 代理，不接受 socks5 协议</strong>；具体方法如下所示</p>

<ul>
  <li>获取官方 registry 仓库 Dockerfile 相关文件(<a href="https://github.com/docker/distribution-library-image">地址点这里</a>)</li>
  <li>想办法在本地搞一个 http/https 代理</li>
  <li>在 <code class="highlighter-rouge">registry serve</code> 命令启动前声明代理</li>
</ul>

<p>再直白一点做法就是 <code class="highlighter-rouge">https_proxy=http://xxxxx registry serve</code>，剩下的各位自己探索吧</p>

<p>转载请注明出处，本文采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/">CC4.0</a> 协议授权</p>
:ET