I",{<p><img src="https://cdn.oss.link/markdown/Spring-logotouming.png" alt="Spring-logo" /></p>

<h3 id="一spring-hello-world">一、Spring Hello World</h3>

<ul>
  <li>1、新建 <code class="highlighter-rouge">Mavne java</code> 项目，<code class="highlighter-rouge">POM</code> 加入<code class="highlighter-rouge">Spring Context</code></li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;version&gt;</span>4.2.4.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<!--more-->

<ul>
  <li>2、新建一个 <code class="highlighter-rouge">Java Bean</code></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">mritd</span><span class="o">.</span><span class="na">beans</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Persion</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">address</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">age</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getAddress</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">address</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddress</span><span class="o">(</span><span class="nc">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"Persion [name="</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">", age="</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span> <span class="s">", address="</span> <span class="o">+</span> <span class="n">address</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nf">Persion</span><span class="o">()</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="c1">// TODO Auto-generated constructor stub</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nf">Persion</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="nc">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>3、创建 <code class="highlighter-rouge">Spring</code> 配置文件 <code class="highlighter-rouge">applicationContext.xml</code>，并配置 <code class="highlighter-rouge">Bean</code> 信息</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
	<span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
	<span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="nt">&gt;</span>

	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"persion"</span> <span class="na">name=</span><span class="s">"persion"</span> <span class="na">class=</span><span class="s">"me.mritd.beans.Persion"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">value=</span><span class="s">"Hello World"</span><span class="nt">&gt;&lt;/property&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"age"</span> <span class="na">value=</span><span class="s">"20"</span><span class="nt">&gt;&lt;/property&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"address"</span> <span class="na">value=</span><span class="s">"伊拉克"</span><span class="nt">&gt;&lt;/property&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<ul>
  <li>4、编写测试类测试 <strong>从Spring上下文获取一个Bean</strong></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">mritd</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">me.mritd.beans.Persion</span><span class="o">;</span>
<span class="cm">/**
 *
 * Copyright © 2016 Mritd. All rights reserved.
 *
 * @ClassName: Test1
 * @Description: TODO
 * @author: 漠然
 * @date: 2016年1月1日 下午8:59:14
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test1</span> <span class="o">{</span>

	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHelloWorld</span><span class="o">(){</span>

		<span class="c1">// 创建ApplicationContext</span>
		<span class="nc">ApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"applicationContext.xml"</span><span class="o">);</span>
		<span class="c1">// 从上下文获取 persion Bean</span>
		<span class="nc">Persion</span> <span class="n">persion</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Persion</span><span class="o">)</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"persion"</span><span class="o">);</span>
		<span class="c1">// 查看获取的Persion</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">persion</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="二spring-bean配置">二、Spring Bean配置</h3>

<ul>
  <li>1、IOC 和 DI 概述</li>
</ul>

<blockquote>
  <p><code class="highlighter-rouge">IOC(Inversion of Control)</code>：其思想是反转资源获取的方向.传统的资源查找方式要求组件向容器发起请求查找资源. 作为回应, 容器适时的返回资源. 而应用了 <code class="highlighter-rouge">IOC</code> 之后,则是容器主动地将资源推送给它所管理的组件,组件所要做的仅是选择一种合适的方式来接受资源. 这种行为也被称为查找的被动形式 <code class="highlighter-rouge">DI(Dependency Injection)</code> - <code class="highlighter-rouge">IOC</code> 的另一种表述方式：即组件以一些预先定义好的方式(例如: setter 方法)接受来自如容器的资源注入. 相对于 <code class="highlighter-rouge">IOC</code> 而言，这种表述更直接。</p>
</blockquote>

<ul>
  <li>2、配置Bean</li>
</ul>

<blockquote>
  <p>Spring通过在xml配置文件中的 <code class="highlighter-rouge">&lt;bean&gt;</code> 节点来配置放入IOC容器中的bean；</p>
</blockquote>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"persion"</span> <span class="na">name=</span><span class="s">"persion"</span> <span class="na">class=</span><span class="s">"me.mritd.beans.Persion"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">value=</span><span class="s">"Hello World"</span><span class="nt">&gt;&lt;/property&gt;</span>
	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"age"</span> <span class="na">value=</span><span class="s">"20"</span><span class="nt">&gt;&lt;/property&gt;</span>
	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"address"</span> <span class="na">value=</span><span class="s">"伊拉克"</span><span class="nt">&gt;&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<blockquote>
  <ul>
    <li>id: IOC容器中Bean的ID
      <ul>
        <li>在 IOC 容器中必须是唯一的</li>
        <li>若 id 没有指定，Spring 自动 <strong>将全限定性类名</strong> 作为 Bean 的名字</li>
        <li>id 可以指定多个名字，名字之间可用逗号、分号、或空格分隔</li>
      </ul>
    </li>
  </ul>
</blockquote>

<hr />

<blockquote>
  <p>在 Spring IOC 容器读取 Bean 配置创建 Bean 实例之前,必须对它进行实例化. 只有在容器实例化后, 才可以从 IOC 容器里获取 Bean 实例并使用；Spring 提供了 <strong>两种类型</strong> 的 IOC 容器实现:</p>
</blockquote>

<blockquote>
  <ul>
    <li>BeanFactory: IOC 容器的基本实现.</li>
    <li>ApplicationContext: 提供了更多的高级特性. 是 BeanFactory 的子接口.</li>
  </ul>
</blockquote>

<blockquote>
  <p><code class="highlighter-rouge">BeanFactory</code> 是 Spring 框架的基础设施，面向 Spring 本身；<code class="highlighter-rouge">ApplicationContext</code> 面向使用 Spring 框架的开发者，几乎所有的应用场合都直接使用 <code class="highlighter-rouge">ApplicationContext</code> 而非底层的 <code class="highlighter-rouge">BeanFactory</code>;无论使用何种方式,配置文件时相同的. ApplicationContext UML 图示例如下
  <img src="https://cdn.oss.link/markdown/Spring-applicationContext-UML.png" alt="Spring-applicationContext-UML" /></p>
</blockquote>

<blockquote>
  <ul>
    <li>ApplicationContext 的主要实现类：
      <ul>
        <li>ClassPathXmlApplicationContext：从 类路径下加载配置文件</li>
        <li>FileSystemXmlApplicationContext: 从文件系统中加载配置文件</li>
      </ul>
    </li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li>ConfigurableApplicationContext 扩展于 ApplicationContext，新增加两个主要方法：<code class="highlighter-rouge">refresh()</code> 和 <code class="highlighter-rouge">close()</code>， 让 ApplicationContext 具有启动、刷新和关闭上下文的能力</li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li>ApplicationContext <strong>在初始化上下文时就实例化所有单例的 Bean</strong></li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li>WebApplicationContext 是专门为 WEB 应用而准备的，它允许从相对于 WEB 根目录的路径中完成初始化工作</li>
  </ul>
</blockquote>

<ul>
  <li>
    <p>3、Spring IOC/DI 注入方式:</p>

    <ul>
      <li>属性注入</li>
    </ul>

    <blockquote>
      <p>通过Set方法注入，使用<property>标签设置，name属性指定属性名，value指定属性值</property></p>
    </blockquote>

    <ul>
      <li>构造器注入</li>
    </ul>

    <blockquote>
      <p>通过有参构造器进行注入，使用<constructor-arg> 标签，构造器注入既可以按照索引注入，也可是按照参数类型注入:</constructor-arg></p>
    </blockquote>

    <blockquote>
      <ul>
        <li>按索引匹配注入
``` xml
<!-- 构造器注入(索引方式) --></li>
      </ul>
    </blockquote>
  </li>
</ul>
<bean id="persion" name="persion" class="me.mritd.beans.Persion">
	<constructor-arg value="zhangsan" index="0"></constructor-arg>
	<constructor-arg value="10" index="1"></constructor-arg>
	<constructor-arg value="伊拉克" index="2"></constructor-arg>
</bean>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```   &gt; - 按类型匹配注入
``` xml &lt;!-- 构造器注入(按照类型) --&gt;
</code></pre></div></div>
<bean id="persion1" name="persion1" class="me.mritd.beans.Persion">
	<constructor-arg value="zhangsan1" type="java.lang.String"></constructor-arg>
	<constructor-arg value="11" type="java.lang.Integer"></constructor-arg>
	<constructor-arg value="伊拉克1" type="java.lang.String"></constructor-arg>
</bean>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```   &gt; - 工厂方法注入（很少使用，不推荐）
</code></pre></div></div>

<ul>
  <li>4、Sping bean 引用其他 bean 配置</li>
</ul>

<blockquote>
  <p>首先定义两个 <code class="highlighter-rouge">Java Bean</code></p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">mritd</span><span class="o">.</span><span class="na">beans</span><span class="o">;</span>
<span class="cm">/**
 *
 * Copyright © 2016 Mritd. All rights reserved.
 *
 * @ClassName: Car
 * @Description: TODO
 * @author: 漠然
 * @date: 2016年1月2日 上午1:09:46
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">carName</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCarName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">carName</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCarName</span><span class="o">(</span><span class="nc">String</span> <span class="n">carName</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">carName</span> <span class="o">=</span> <span class="n">carName</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"Car [carName="</span> <span class="o">+</span> <span class="n">carName</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nf">Car</span><span class="o">()</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="c1">// TODO Auto-generated constructor stub</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nf">Car</span><span class="o">(</span><span class="nc">String</span> <span class="n">carName</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">carName</span> <span class="o">=</span> <span class="n">carName</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">mritd</span><span class="o">.</span><span class="na">beans</span><span class="o">;</span>
<span class="cm">/**
 *
 * Copyright © 2016 Mritd. All rights reserved.
 *
 * @ClassName: Persion
 * @Description: TODO
 * @author: 漠然
 * @date: 2016年1月2日 上午1:11:21
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Persion</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">address</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">Car</span> <span class="n">car</span><span class="o">;</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"Persion [name="</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">", age="</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span> <span class="s">", address="</span> <span class="o">+</span> <span class="n">address</span> <span class="o">+</span> <span class="s">", car="</span> <span class="o">+</span> <span class="n">car</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nf">Persion</span><span class="o">()</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="c1">// TODO Auto-generated constructor stub</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nf">Persion</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="nc">String</span> <span class="n">address</span><span class="o">,</span> <span class="nc">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">car</span> <span class="o">=</span> <span class="n">car</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">age</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getAddress</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">address</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddress</span><span class="o">(</span><span class="nc">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">Car</span> <span class="nf">getCar</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">car</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCar</span><span class="o">(</span><span class="nc">Car</span> <span class="n">car</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">car</span> <span class="o">=</span> <span class="n">car</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>配置 Bean 引用</p>
</blockquote>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
	<span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
	<span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="nt">&gt;</span>

	<span class="c">&lt;!-- 首先定义没有引用的 Bean --&gt;</span>
	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"car"</span> <span class="na">class=</span><span class="s">"me.mritd.beans.Car"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"carName"</span> <span class="na">value=</span><span class="s">"四个圈"</span><span class="nt">&gt;&lt;/property&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>

	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"persion"</span> <span class="na">name=</span><span class="s">"persion"</span> <span class="na">class=</span><span class="s">"me.mritd.beans.Persion"</span><span class="nt">&gt;</span>
		<span class="c">&lt;!-- 采用构造器注入(索引位置)的方式 --&gt;</span>
		<span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">"0"</span> <span class="na">value=</span><span class="s">"zhangsan"</span><span class="nt">&gt;&lt;/constructor-arg&gt;</span>
		<span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">"1"</span> <span class="na">value=</span><span class="s">"10"</span><span class="nt">&gt;&lt;/constructor-arg&gt;</span>
		<span class="c">&lt;!-- 显示指定 某个属性值为null 使用 &lt;null/&gt;标签 --&gt;</span>
		<span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">"2"</span><span class="nt">&gt;&lt;null/&gt;&lt;/constructor-arg&gt;</span>
		<span class="c">&lt;!-- 使用 ref 属性指定 引用 Bean --&gt;</span>
		<span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">"3"</span> <span class="na">ref=</span><span class="s">"car"</span><span class="nt">&gt;&lt;/constructor-arg&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>

	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"persion1"</span> <span class="na">name=</span><span class="s">"persion1"</span> <span class="na">class=</span><span class="s">"me.mritd.beans.Persion"</span><span class="nt">&gt;</span>
		<span class="c">&lt;!-- 采用属性注入 --&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">value=</span><span class="s">"zhangsan1"</span><span class="nt">&gt;&lt;/property&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"age"</span> <span class="na">value=</span><span class="s">"11"</span><span class="nt">&gt;&lt;/property&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"address"</span> <span class="na">value=</span><span class="s">"伊拉克"</span><span class="nt">&gt;&lt;/property&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"car"</span> <span class="na">ref=</span><span class="s">"car"</span><span class="nt">&gt;&lt;/property&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>

<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<blockquote>
  <p>测试获取两个 Persion Bean，打印里面的 Car</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">mritd</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">me.mritd.beans.Persion</span><span class="o">;</span>

<span class="cm">/**
 *
 * Copyright © 2016 Mritd. All rights reserved.
 *
 * @ClassName: Test2
 * @Description: TODO
 * @author: 漠然
 * @date: 2016年1月2日 上午1:20:49
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>

	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">test2</span><span class="o">(){</span>
		<span class="c1">// 创建 ApplicationContext</span>
		<span class="nc">ApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"applicationContext.xml"</span><span class="o">);</span>
		<span class="c1">// 获取Bean 测试</span>
		<span class="nc">Persion</span> <span class="n">persion</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Persion</span><span class="o">)</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"persion"</span><span class="o">);</span>
		<span class="nc">Persion</span> <span class="n">persion1</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Persion</span><span class="o">)</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"persion1"</span><span class="o">);</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">persion</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">persion1</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>转载请注明出处，本文采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/">CC4.0</a> 协议授权</p>
:ET