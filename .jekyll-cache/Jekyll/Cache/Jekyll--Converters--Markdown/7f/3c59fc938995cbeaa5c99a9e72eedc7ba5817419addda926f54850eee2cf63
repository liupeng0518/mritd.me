I"C<blockquote>
  <p>本文参考 《kubernetes 实战》、《kubernetes 权威指南》、<a href="https://coreos.com/kubernetes/docs/latest/getting-started.html">CoreOS Getting-Started</a></p>
</blockquote>

<h2 id="一简介">一、简介</h2>

<p>kubernetes 提供了多种安全认证机制，其中对于集群通讯间可采用 TLS(https) 双向认证机制，也可采用基于 Token 或用户名密码的单向 tls 认证，由于 kubernetes 某些组件只支持双向 TLS 认证，所以本文主要记录 kubernetes 双向认证配置。</p>

<h2 id="二签发证书">二、签发证书</h2>

<p>其中 TLS 双向认证需要预先自建 CA 签发证书，权威 CA 机构的证书应该不可用，因为大部分 kubernetes 应该基于内网部署，而内网应该都会采用私有 IP 地址通讯，权威 CA 好像只能签署域名证书，对于签署到 IP 可能无法实现。</p>

<!--more-->

<h3 id="21自签-ca">2.1、自签 CA</h3>

<p>对于私有证书签发首先要自签署 一个 CA 根证书，关于 OpenSSL 使用等相关可参考 <a href="http://mritd.me/2016/07/02/%E4%BA%92%E8%81%94%E7%BD%91%E5%8A%A0%E5%AF%86%E5%8F%8AOpenSSL%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/">互联网加密及OpenSSL介绍和简单使用</a></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建证书存放目录</span>
<span class="nb">mkdir </span>cert <span class="o">&amp;&amp;</span> <span class="nb">cd </span>cert
<span class="c"># 创建 CA 私钥</span>
openssl genrsa <span class="nt">-out</span> ca-key.pem 2048
<span class="c"># 自签 CA</span>
openssl req <span class="nt">-x509</span> <span class="nt">-new</span> <span class="nt">-nodes</span> <span class="nt">-key</span> ca-key.pem <span class="nt">-days</span> 10000 <span class="nt">-out</span> ca.pem <span class="nt">-subj</span> <span class="s2">"/CN=kube-ca"</span>
</code></pre></div></div>

<h3 id="22签署-apiserver-证书">2.2、签署 apiserver 证书</h3>

<p>自签 CA 后就需要使用这个根 CA 签署 apiserver 相关的证书了，首先先修改 openssl 的配置</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 复制 openssl 配置文件</span>
<span class="nb">cp</span> /etc/pki/tls/openssl.cnf <span class="nb">.</span>
<span class="c"># 编辑 openssl 配置使其支持 IP 认证</span>
vim openssl.cnf
<span class="c"># 主要修改内容如下</span>
<span class="o">[</span>req]
req_extensions <span class="o">=</span> v3_req
distinguished_name <span class="o">=</span> req_distinguished_name
<span class="o">[</span>req_distinguished_name]
<span class="o">[</span> v3_req <span class="o">]</span>
basicConstraints <span class="o">=</span> CA:FALSE
keyUsage <span class="o">=</span> nonRepudiation, digitalSignature, keyEncipherment
subjectAltName <span class="o">=</span> @alt_names
<span class="o">[</span>alt_names]
DNS.1 <span class="o">=</span> kubernetes
DNS.2 <span class="o">=</span> kubernetes.default
DNS.3 <span class="o">=</span> kubernetes.default.svc
DNS.4 <span class="o">=</span> kubernetes.default.svc.cluster.local
IP.1 <span class="o">=</span> <span class="k">${</span><span class="nv">K8S_SERVICE_IP</span><span class="k">}</span>  <span class="c"># kubernetes server ip</span>
IP.2 <span class="o">=</span> <span class="k">${</span><span class="nv">MASTER_HOST</span><span class="k">}</span>     <span class="c"># master ip(如果都在一台机器上写一个就行)</span>
</code></pre></div></div>

<p>然后开始签署 apiserver 相关的证书</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 生成 apiserver 私钥</span>
openssl genrsa <span class="nt">-out</span> apiserver-key.pem 2048
<span class="c"># 生成签署请求</span>
openssl req <span class="nt">-new</span> <span class="nt">-key</span> apiserver-key.pem <span class="nt">-out</span> apiserver.csr <span class="nt">-subj</span> <span class="s2">"/CN=kube-apiserver"</span> <span class="nt">-config</span> openssl.cnf
<span class="c"># 使用自建 CA 签署</span>
openssl x509 <span class="nt">-req</span> <span class="nt">-in</span> apiserver.csr <span class="nt">-CA</span> ca.pem <span class="nt">-CAkey</span> ca-key.pem <span class="nt">-CAcreateserial</span> <span class="nt">-out</span> apiserver.pem <span class="nt">-days</span> 365 <span class="nt">-extensions</span> v3_req <span class="nt">-extfile</span> openssl.cnf
</code></pre></div></div>

<h3 id="23签署-node-证书">2.3、签署 node 证书</h3>

<p>apiserver 证书签署完成后还需要签署每个节点 node 的证书，同样需要先修改一下 openssl 配置</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># copy master 的 openssl 配置</span>
<span class="nb">cp </span>openssl.cnf worker-openssl.cnf
<span class="c"># 修改 worker-openssl 配置</span>
vim worker-openssl.cnf
<span class="c"># 修改内容如下，主要是去掉 DNS 同时增加节点 IP</span>
<span class="o">[</span>req]
req_extensions <span class="o">=</span> v3_req
distinguished_name <span class="o">=</span> req_distinguished_name
<span class="o">[</span>req_distinguished_name]
<span class="o">[</span> v3_req <span class="o">]</span>
basicConstraints <span class="o">=</span> CA:FALSE
keyUsage <span class="o">=</span> nonRepudiation, digitalSignature, keyEncipherment
subjectAltName <span class="o">=</span> @alt_names
<span class="o">[</span>alt_names]
IP.1 <span class="o">=</span> NODE1-IP <span class="c"># 此处填写 node 的内网 ip，多个 node ip 地址以此类推 IP.2 = NODE2-IP</span>
</code></pre></div></div>

<p>接下来签署 node 的证书，以 node1 IP为 192.168.1.142 为例</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 先声明两个变量方便引用</span>
<span class="nv">WORKER_FQDN</span><span class="o">=</span>node1          <span class="c"># node 昵称</span>
<span class="nv">WORKER_IP</span><span class="o">=</span>192.168.1.142    <span class="c"># node IP</span>
<span class="c"># 生成 node 私钥</span>
openssl genrsa <span class="nt">-out</span> <span class="k">${</span><span class="nv">WORKER_FQDN</span><span class="k">}</span><span class="nt">-worker-key</span>.pem 2048
<span class="c"># 生成 签署请求</span>
openssl req <span class="nt">-new</span> <span class="nt">-key</span> <span class="k">${</span><span class="nv">WORKER_FQDN</span><span class="k">}</span><span class="nt">-worker-key</span>.pem <span class="nt">-out</span> <span class="k">${</span><span class="nv">WORKER_FQDN</span><span class="k">}</span><span class="nt">-worker</span>.csr <span class="nt">-subj</span> <span class="s2">"/CN=</span><span class="k">${</span><span class="nv">WORKER_FQDN</span><span class="k">}</span><span class="s2">"</span> <span class="nt">-config</span> worker-openssl.cnf
<span class="c"># 使用自建 CA 签署</span>
openssl x509 <span class="nt">-req</span> <span class="nt">-in</span> <span class="k">${</span><span class="nv">WORKER_FQDN</span><span class="k">}</span><span class="nt">-worker</span>.csr <span class="nt">-CA</span> ca.pem <span class="nt">-CAkey</span> ca-key.pem <span class="nt">-CAcreateserial</span> <span class="nt">-out</span> <span class="k">${</span><span class="nv">WORKER_FQDN</span><span class="k">}</span><span class="nt">-worker</span>.pem <span class="nt">-days</span> 365 <span class="nt">-extensions</span> v3_req <span class="nt">-extfile</span> worker-openssl.cnf
</code></pre></div></div>

<h3 id="24生成集群管理证书">2.4、生成集群管理证书</h3>

<p>在 master(apiserver) 和 node 的证书签署完成后还需要签署一个集群管理证书</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl genrsa <span class="nt">-out</span> admin-key.pem 2048
openssl req <span class="nt">-new</span> <span class="nt">-key</span> admin-key.pem <span class="nt">-out</span> admin.csr <span class="nt">-subj</span> <span class="s2">"/CN=kube-admin"</span>
openssl x509 <span class="nt">-req</span> <span class="nt">-in</span> admin.csr <span class="nt">-CA</span> ca.pem <span class="nt">-CAkey</span> ca-key.pem <span class="nt">-CAcreateserial</span> <span class="nt">-out</span> admin.pem <span class="nt">-days</span> 365
</code></pre></div></div>

<p><strong>最终生成的文件清单如下</strong></p>

<p><img src="https://cdn.oss.link/markdown/hexo_kubernetes_tls_certs.png" alt="hexo_kubernetes_tls_certs" /></p>

<h2 id="三配置-kubernetes">三、配置 kubernetes</h2>

<h3 id="31配置-master">3.1、配置 master</h3>

<p>相关证书全部准备好以后，开始配置 master，首先复制证书</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 先把证书 copy 到配置目录</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> /etc/kubernetes/ssl
<span class="nb">cp </span>cert/ca.pem cert/apiserver.pem cert/apiserver-key.pem /etc/kubernetes/ssl
<span class="c"># rpm 安装的 kubernetes 默认使用 kube 用户，需要更改权限</span>
<span class="nb">chown </span>kube:kube <span class="nt">-R</span> /etc/kubernetes/ssl
</code></pre></div></div>
<p><strong>然后编辑 master 的 apiserver 配置</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 编辑 master apiserver 配置文件</span>
vim /etc/kubernetes/apiserver
<span class="c"># 配置如下</span>
<span class="nv">KUBE_API_ADDRESS</span><span class="o">=</span><span class="s2">"--bind-address=192.168.1.142 --insecure-bind-address=127.0.0.1 "</span>
<span class="nv">KUBE_API_PORT</span><span class="o">=</span><span class="s2">"--secure-port=6443 --insecure-port=8080"</span>
<span class="nv">KUBE_ETCD_SERVERS</span><span class="o">=</span><span class="s2">"--etcd-servers=http://192.168.1.100:2379"</span>
<span class="nv">KUBE_SERVICE_ADDRESSES</span><span class="o">=</span><span class="s2">"--service-cluster-ip-range=10.254.0.0/16"</span>
<span class="nv">KUBE_ADMISSION_CONTROL</span><span class="o">=</span><span class="s2">"--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota"</span>
<span class="nv">KUBE_API_ARGS</span><span class="o">=</span><span class="s2">"--tls-cert-file=/etc/kubernetes/ssl/apiserver.pem --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem --client-ca-file=/etc/kubernetes/ssl/ca.pem --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem "</span>
</code></pre></div></div>

<p><strong>接着编辑 controller manager 的配置</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 编辑 controller manager 配置</span>
vim /etc/kubernetes/controller-manager
<span class="c"># 配置如下</span>
<span class="nv">KUBE_CONTROLLER_MANAGER_ARGS</span><span class="o">=</span><span class="s2">"--service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem  --root-ca-file=/etc/kubernetes/ssl/ca.pem --master=http://127.0.0.1:8080"</span>
</code></pre></div></div>

<p><strong>最后启动 apiserver 、controller manager 和 scheduler</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl start kube-apiserver
systemctl start kube-controller-manager
systemctl start kube-scheduler
systemctl <span class="nb">enable </span>kube-apiserver
systemctl <span class="nb">enable </span>kube-controller-manager
systemctl <span class="nb">enable </span>kube-scheduler
systemctl status kube-apiserver
systemctl status kube-controller-manager
systemctl status kube-scheduler
</code></pre></div></div>

<h3 id="32配置-node">3.2、配置 node</h3>

<p><strong>由于是测试，所以 node1 和 master 启动在同一台机器上，配置时同样先 copy 配置文件</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp </span>cert/node1-worker-key.pem cert/node1-worker.pem /etc/kubernetes/ssl
<span class="nb">chown </span>kube:kube <span class="nt">-R</span> /etc/kubernetes/ssl
</code></pre></div></div>

<p><strong>修改 kubelet 配置</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/kubernetes/kubelet
<span class="c"># 配置如下</span>
<span class="nv">KUBELET_ADDRESS</span><span class="o">=</span><span class="s2">"--address=192.168.1.142"</span>
<span class="nv">KUBELET_HOSTNAME</span><span class="o">=</span><span class="s2">"--hostname-override=192-168-1-142"</span>
<span class="nv">KUBELET_API_SERVER</span><span class="o">=</span><span class="s2">"--api-servers=https://192.168.1.142:6443"</span>
<span class="nv">KUBELET_ARGS</span><span class="o">=</span><span class="s2">"--tls-cert-file=/etc/kubernetes/ssl/node1-worker.pem --tls-private-key-file=/etc/kubernetes/ssl/node1-worker-key.pem --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml"</span>
</code></pre></div></div>

<p><strong>如果使用了 <code class="highlighter-rouge">KUBELET_HOSTNAME</code>，那么 hostname 必须在本地 hosts 存在，所以还需要修改一下 hosts 文件</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"127.0.0.1 192-168-1-142"</span> <span class="o">&gt;&gt;</span> /etc/hosts
</code></pre></div></div>

<p><strong>修改 config 配置</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/kubernetes/config
<span class="c"># 配置如下</span>
<span class="nv">KUBE_LOGTOSTDERR</span><span class="o">=</span><span class="s2">"--logtostderr=true"</span>
<span class="nv">KUBE_LOG_LEVEL</span><span class="o">=</span><span class="s2">"--v=0"</span>
<span class="nv">KUBE_ALLOW_PRIV</span><span class="o">=</span><span class="s2">"--allow-privileged=false"</span>
apiserver
<span class="nv">KUBE_MASTER</span><span class="o">=</span><span class="s2">"--master=https://192.168.1.142:6443"</span>
</code></pre></div></div>

<p><strong>创建 kube-proxy 配置文件</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/kubernetes/worker-kubeconfig.yaml
<span class="c"># 内容如下</span>
apiVersion: v1
kind: Config
clusters:
- name: <span class="nb">local
  </span>cluster:
    certificate-authority: /etc/kubernetes/ssl/ca.pem
<span class="nb">users</span>:
- name: kubelet
  user:
    client-certificate: /etc/kubernetes/ssl/node1-worker.pem
    client-key: /etc/kubernetes/ssl/node1-worker-key.pem
contexts:
- context:
    cluster: <span class="nb">local
    </span>user: kubelet
  name: kubelet-context
current-context: kubelet-context
</code></pre></div></div>

<p><strong>配置 kube-proxy 使其使用证书</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/kubernetes/proxy
<span class="c"># 配置如下</span>
<span class="nv">KUBE_PROXY_ARGS</span><span class="o">=</span><span class="s2">"--master=https://192.168.1.100:6443 --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml"</span>
</code></pre></div></div>

<p><strong>最后启动并测试</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动</span>
systemctl start kubelet
systemctl start kube-proxy
systemctl <span class="nb">enable </span>kubelet
systemctl <span class="nb">enable </span>kube-proxy
systemctl status kubelet
systemctl status kube-proxy
<span class="c"># 测试</span>
kubectl get node
<span class="c"># 显示如下</span>
NAME            STATUS    AGE
192-168-1-142   Ready     13s
</code></pre></div></div>

<h2 id="四其他相关">四、其他相关</h2>

<p>master 启动后发现一个错误，大致意思是内核版本过低，但是 CentOS 已经 upgrade 到官方最新稳定版了。。。无奈换了下内核好了，以下为记录升级到最新内核的方法</p>

<pre><code class="language-rpm"># 导入 elrepo 的key
rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
# 安装 elrepo 源
rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm
# 在yum的ELRepo源中，mainline 为最新版本的内核，so 安装 ml 的内核
yum --enablerepo=elrepo-kernel install  kernel-ml-devel kernel-ml -y
# 切换 grub 引导，默认启动的顺序应该为1,升级以后内核是往前面插入，为0
grub2-set-default 0
# 最后重启
reboot
# 再看下检查下内核版本已经是 4.7.3-1.el7.elrepo.x86_64
uname -r
</code></pre>
<p>转载请注明出处，本文采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/">CC4.0</a> 协议授权</p>
:ET