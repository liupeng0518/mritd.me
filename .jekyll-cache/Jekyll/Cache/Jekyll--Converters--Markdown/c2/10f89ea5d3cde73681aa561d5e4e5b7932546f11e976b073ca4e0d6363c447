I"G3<blockquote>
  <p>在很久以前的版本研究过 kubernetes 的插件机制，当时弄了一个快速切换 <code class="highlighter-rouge">namespace</code> 的小插件；最近把自己本机的 kubectl 升级到了 1.12，突然发现插件不能用了；撸了一下文档发现插件机制彻底改了…</p>
</blockquote>

<h2 id="一插件编写语言">一、插件编写语言</h2>

<p>kubernetes 1.12 新的插件机制在编写语言上同以前一样，<strong>可以以任意语言编写，只要能弄一个可执行的文件出来就行</strong>，插件可以是一个 <code class="highlighter-rouge">bash</code>、<code class="highlighter-rouge">python</code> 脚本，也可以是 <code class="highlighter-rouge">Go</code> 等编译语言最终编译的二进制；以下是一个 Copy 自官方文档的 <code class="highlighter-rouge">bash</code> 编写的插件样例</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># optional argument handling</span>
<span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"version"</span> <span class="o">]]</span>
<span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"1.0.0"</span>
    <span class="nb">exit </span>0
<span class="k">fi</span>

<span class="c"># optional argument handling</span>
<span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"config"</span> <span class="o">]]</span>
<span class="k">then
    </span><span class="nb">echo</span> <span class="nv">$KUBECONFIG</span>
    <span class="nb">exit </span>0
<span class="k">fi

</span><span class="nb">echo</span> <span class="s2">"I am a plugin named kubectl-foo"</span>
</code></pre></div></div>

<h2 id="二插件加载方式">二、插件加载方式</h2>

<h3 id="21插件位置">2.1、插件位置</h3>

<p>1.12 kubectl 插件最大的变化就是加载方式变了，由原来的放置在指定位置，还要为其编写 yaml 配置变成了现在的类似 git 扩展命令的方式: <strong>只要放置在 PATH 下，并以 <code class="highlighter-rouge">kubectl-</code> 开头的可执行文件都被认为是 <code class="highlighter-rouge">kubectl</code> 的插件</strong>；所以你可以随便弄个小脚本(比如上面的代码)，然后改好名字赋予可执行权限，扔到 PATH 下即可</p>

<p><img src="https://cdn.oss.link/markdown/s64v6.png" alt="test-plugin" /></p>

<h3 id="22插件变量">2.2、插件变量</h3>

<p>同以前不通，<strong>以前版本的执行插件时，<code class="highlighter-rouge">kubectl</code> 会向插件传递一些特定的与 <code class="highlighter-rouge">kubectl</code> 相关的变量，现在则只会传递标准变量；即 <code class="highlighter-rouge">kubectl</code> 能读到什么变量，插件就能读到，其他的私有化变量(比如 <code class="highlighter-rouge">KUBECTL_PLUGINS_CURRENT_NAMESPACE</code>)不会再提供</strong></p>

<p><img src="https://cdn.oss.link/markdown/vs1c3.png" alt="plugin env" /></p>

<p><strong>并且新版本的插件体系，所有选项(<code class="highlighter-rouge">flag</code>) 将全部交由插件本身处理，kubectl 不会再解析</strong>，比如下面的 <code class="highlighter-rouge">--help</code> 交给了自定义插件处理，由于脚本内没有处理这个选项，所以相当于选项无效了</p>

<p><img src="https://cdn.oss.link/markdown/8ch88.png" alt="plugin flag" /></p>

<p>还有就是 <strong>传递给插件的第一个参数永远是插件自己的绝对位置，比如这个 <code class="highlighter-rouge">test</code> 插件在执行时的 <code class="highlighter-rouge">$0</code> 是 <code class="highlighter-rouge">/usr/local/bin/kubectl-test</code></strong></p>

<h3 id="23插件命名及查找">2.3、插件命名及查找</h3>

<p>目前在插件命名及查找顺序上官方文档写的非常详尽，不给过对于普通使用者来说，实际上命名规则和查找与常规的 Linux 下的命令查找机制相同，只不过还做了增强；增强后的基本规则如下</p>

<ul>
  <li><code class="highlighter-rouge">PATH</code> 优先匹配原则</li>
  <li>短横线 <code class="highlighter-rouge">-</code> 自动分割匹配以及智能转义</li>
  <li>以最精确匹配为首要目标</li>
  <li>查找失败自动转换参数</li>
</ul>

<p><code class="highlighter-rouge">PATH</code> 优先匹配原则跟传统的命令查找一致，即当多个路径下存在同名的插件时，则采用最先查找到的插件</p>

<p><img src="https://cdn.oss.link/markdown/ljyp5.png" alt="plugin path" /></p>

<p>当你的插件文件名中包含 <code class="highlighter-rouge">-</code> ，并且 <code class="highlighter-rouge">kubectl</code> 在无法精确找到插件时会尝试自动拼接命令来尝试匹配；如下所示，在没有找到 <code class="highlighter-rouge">kubectl-test</code> 这个命令时会尝试拼接参数查找</p>

<p><img src="https://cdn.oss.link/markdown/l85bp.png" alt="auto merge" /></p>

<p>由于以上这种查找机制，<strong>当命令中确实包含 <code class="highlighter-rouge">-</code> 时，必须进行转义以 <code class="highlighter-rouge">_</code> 替换，否则 <code class="highlighter-rouge">kubectl</code> 会提示命令未找到错误</strong>；替换后可直接使用 <code class="highlighter-rouge">kubectl 插件命令(包含-)</code> 执行，同时也支持以原始插件名称执行(使用 <code class="highlighter-rouge">_</code>)</p>

<p><img src="https://cdn.oss.link/markdown/7vm0l.png" alt="name contains dash" /></p>

<p>在复杂插件体系下，多个插件可能包含同样的前缀，此时将遵序最精确查找原则；即当两个插件 <code class="highlighter-rouge">kubectl-test-aaa</code>、<code class="highlighter-rouge">kubectl-test-aaa-bbb</code> 同时存在，并且执行 <code class="highlighter-rouge">kubectl test aaa bbb</code> 命令时，优先匹配最精确的插件 <code class="highlighter-rouge">kubectl-test-aaa-bbb</code>，<strong>而不是将 <code class="highlighter-rouge">bbb</code> 作为参数传递给 <code class="highlighter-rouge">kubectl-test-aaa</code> 插件</strong></p>

<p><img src="https://cdn.oss.link/markdown/god8q.png" alt="precise search" /></p>

<h3 id="24总结">2.4、总结</h3>

<p>插件查找机制在一般情况下与传统 PATH 查找方式相同，同时 <code class="highlighter-rouge">kubectl</code> 实现了智能的 <code class="highlighter-rouge">-</code> 自动匹配查找、更精确的命令命中功能；这两种机制的实现主要为了方便编写插件的命令树(插件命令的子命令…)，类似下面这种</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> ./plugin_command_tree
kubectl-parent
kubectl-parent-subcommand
kubectl-parent-subcommand-subsubcommand
</code></pre></div></div>

<p>当出现多个位置有同名插件时，执行 <code class="highlighter-rouge">kubectl plugin list</code> 能够检测出哪些插件由于 PATH 查找顺序原因导致永远不会被执行问题</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl plugin list
The following kubectl-compatible plugins are available:

<span class="nb">test</span>/fixtures/pkg/kubectl/plugins/kubectl-foo
/usr/local/bin/kubectl-foo
  - warning: /usr/local/bin/kubectl-foo is overshadowed by a similarly named plugin: <span class="nb">test</span>/fixtures/pkg/kubectl/plugins/kubectl-foo
plugins/kubectl-invalid
  - warning: plugins/kubectl-invalid identified as a kubectl plugin, but it is not executable

error: 2 plugin warnings were found
</code></pre></div></div>

<h3 id="三golang-的插件辅助库">三、Golang 的插件辅助库</h3>

<p>由于插件机制的变更，导致其他语言编写的插件在实时获取某些配置信息、动态修改 <code class="highlighter-rouge">kubectl</code> 配置方面可能造成一定的阻碍；为此 kubernetes 提供了一个 <a href="https://github.com/kubernetes/cli-runtime">command line runtime package</a>，使用 Go 编写插件，配合这个库可以更加方便的解析和调整 <code class="highlighter-rouge">kubectl</code> 的配置信息</p>

<p>官方为了演示如何使用这个 <a href="https://github.com/kubernetes/cli-runtime">cli-runtime</a> 库编写了一个 <code class="highlighter-rouge">namespace</code> 切换的插件(自己白写了…)，仓库地址在 <a href="https://github.com/kubernetes/sample-cli-plugin">Github</a> 上，基本编译使用如下(直接 <code class="highlighter-rouge">go get</code> 后编译文件默认为目录名 <code class="highlighter-rouge">cmd</code>)</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  ~ go get k8s.io/sample-cli-plugin/cmd
➜  ~ <span class="nb">sudo mv </span>gopath/bin/cmd /usr/local/bin/kubectl-ns
➜  ~ kubectl ns
default
➜  ~ kubectl ns <span class="nt">--help</span>
View or <span class="nb">set </span>the current namespace

Usage:
  ns <span class="o">[</span>new-namespace] <span class="o">[</span>flags]

Examples:

        <span class="c"># view the current namespace in your KUBECONFIG</span>
        kubectl ns

        <span class="c"># view all of the namespaces in use by contexts in your KUBECONFIG</span>
        kubectl ns <span class="nt">--list</span>

        <span class="c"># switch your current-context to one that contains the desired namespace</span>
        kubectl ns foo


Flags:
      <span class="nt">--as</span> string                      Username to impersonate <span class="k">for </span>the operation
      <span class="nt">--as-group</span> stringArray           Group to impersonate <span class="k">for </span>the operation, this flag can be repeated to specify multiple groups.
      <span class="nt">--cache-dir</span> string               Default HTTP cache directory <span class="o">(</span>default <span class="s2">"/Users/mritd/.kube/http-cache"</span><span class="o">)</span>
      <span class="nt">--certificate-authority</span> string   Path to a cert file <span class="k">for </span>the certificate authority
      <span class="nt">--client-certificate</span> string      Path to a client certificate file <span class="k">for </span>TLS
      <span class="nt">--client-key</span> string              Path to a client key file <span class="k">for </span>TLS
      <span class="nt">--cluster</span> string                 The name of the kubeconfig cluster to use
      <span class="nt">--context</span> string                 The name of the kubeconfig context to use
  <span class="nt">-h</span>, <span class="nt">--help</span>                           <span class="nb">help </span><span class="k">for </span>ns
      <span class="nt">--insecure-skip-tls-verify</span>       If <span class="nb">true</span>, the server<span class="s1">'s certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.
      --list                           if true, print the list of all namespaces in the current KUBECONFIG
  -n, --namespace string               If present, the namespace scope for this CLI request
      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don'</span>t <span class="nb">timeout </span>requests. <span class="o">(</span>default <span class="s2">"0"</span><span class="o">)</span>
  <span class="nt">-s</span>, <span class="nt">--server</span> string                  The address and port of the Kubernetes API server
      <span class="nt">--token</span> string                   Bearer token <span class="k">for </span>authentication to the API server
      <span class="nt">--user</span> string                    The name of the kubeconfig user to use
</code></pre></div></div>

<p>限于篇幅原因，具体这个 <code class="highlighter-rouge">cli-runtime</code> 包怎么用请自行参考官方写的这个 <code class="highlighter-rouge">sample-cli-plugin</code> (其实并不怎么 “simple”…)</p>

<p>本文参考文档:</p>

<ul>
  <li><a href="https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/">Extend kubectl with plugins</a></li>
  <li><a href="https://github.com/kubernetes/cli-runtime">cli-runtime</a></li>
  <li><a href="https://github.com/kubernetes/sample-cli-plugin">sample-cli-plugin</a></li>
</ul>

<p>转载请注明出处，本文采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/">CC4.0</a> 协议授权</p>
:ET