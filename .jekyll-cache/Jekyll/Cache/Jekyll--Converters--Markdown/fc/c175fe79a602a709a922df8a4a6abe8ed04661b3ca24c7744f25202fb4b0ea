I" <blockquote>
  <p>工作需要临时启动一个 gitlab,无奈 gitlab 需要 ssh 的 22 端口;而使用传统网桥方式映射端口则 clone 等都需要输入端口号,很麻烦;22 端口宿主机又有 sshd 监听;研究了下 docker 网络,记录一下如何分配宿主机网段 IP</p>
</blockquote>

<h3 id="创建-macvlan-网络">创建 macvlan 网络</h3>

<p>关于 Docker 网络模式这里不再细说;由于默认的网桥方式无法满足需要,所以需要创建一个 macvlan 网络</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network create <span class="nt">-d</span> macvlan  <span class="nt">--subnet</span><span class="o">=</span>172.16.0.0/19 <span class="nt">--gateway</span><span class="o">=</span>172.16.0.1 <span class="nt">-o</span> <span class="nv">parent</span><span class="o">=</span>eth0 gitlab-net
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">--subnet</code>: 指定网段(宿主机)</li>
  <li><code class="highlighter-rouge">--gateway</code>: 指定网关(宿主机)</li>
  <li><code class="highlighter-rouge">parent</code>: 注定父网卡(宿主机)</li>
</ul>

<p>创建以后可以使用 <code class="highlighter-rouge">docker network ls</code> 查看</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  ~  docker network <span class="nb">ls
</span>NETWORK ID          NAME                    DRIVER              SCOPE
a4a2980c9165        agent_default           bridge              <span class="nb">local               
</span>a0f29102b413        bridge                  bridge              <span class="nb">local               
</span>2f46dc70b763        gitlab-net              macvlan             <span class="nb">local               
</span>51bd6222530f        host                    host                <span class="nb">local               
</span>7a14a09c3cfc        none                    null                <span class="nb">local</span>
</code></pre></div></div>

<h3 id="创建使用容器">创建使用容器</h3>

<p>接下来创建容器指定网络即可</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--net</span><span class="o">=</span>gitlab-net <span class="nt">--ip</span><span class="o">=</span>172.16.0.170  <span class="nt">-dt</span> <span class="nt">--name</span> <span class="nb">test </span>centos:7
</code></pre></div></div>

<p><strong><code class="highlighter-rouge">--net</code> 指定使用的网络,<code class="highlighter-rouge">--ip</code> 用于指定网段内 IP</strong>;启动后只需要在容器内启动程序测试即可</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动一个 nginx</span>
yum <span class="nb">install </span>nginx
nginx
</code></pre></div></div>

<p>启动后在局域网内能直接通过 IP:80 访问,而且宿主机 80 不受影响</p>

<h3 id="docker-compose-测试">docker-compose 测试</h3>

<p>docker-compose 示例如下</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>version: <span class="s1">'2'</span>
services:
  centos:
    image: centos:7
    restart: always
    <span class="nb">command</span>: /bin/bash <span class="nt">-c</span> <span class="s2">"sleep 999999"</span>
    networks:
      app_net:
        ipv4_address: 10.10.1.34
networks:
  app_net:
    driver: macvlan
    driver_opts:
      parent: enp3s0
    ipam:
      config:
      - subnet: 10.10.1.0/24
        gateway: 10.10.1.2
<span class="c">#        ip_range: 10.25.87.32/28</span>
</code></pre></div></div>

<p>转载请注明出处，本文采用 <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/">CC4.0</a> 协议授权</p>
:ET